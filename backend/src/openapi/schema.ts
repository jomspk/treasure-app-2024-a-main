/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/healthcheck": {
    /** ヘルスチェック用エンドポイント */
    get: {
      responses: {
        /** @description 情報の取得成功 */
        200: {
          content: {
            "text/plain": string;
          };
        };
      };
    };
  };
  "/users/me/register": {
    /** 新規ユーザ作成 */
    post: {
      responses: {
        /** @description 作成成功 */
        201: {
          content: {
            "application/json": components["schemas"]["OriginalUser"];
          };
        };
      };
    };
  };
  "/users/me": {
    /** ログインしているアカウントに関する情報 */
    get: {
      responses: {
        /** @description 情報の取得成功 */
        200: {
          content: {
            "application/json": components["schemas"]["OriginalUser"];
          };
        };
      };
    };
  };
  "/questions": {
    /** 質問作成 */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            userId: string;
            tags: components["schemas"]["Tag"][];
            topics: {
                title?: string;
                description?: string;
                isDefaultTopic?: boolean;
              }[];
          };
        };
      };
      responses: {
        /** @description 作成成功 */
        201: {
          content: {
            "application/json": components["schemas"]["QuestionResponse"];
          };
        };
      };
    };
  };
  "/questions/{questionId}": {
    /** 質問取得 */
    get: {
      parameters: {
        path: {
          questionId: string;
        };
      };
      responses: {
        /** @description 成功 */
        200: {
          content: {
            "application/json": components["schemas"]["Question"];
          };
        };
      };
    };
  };
  "/questions/{questionId}/resolve": {
    /** 質問解決 */
    post: {
      parameters: {
        path: {
          questionId: string;
        };
      };
      responses: {
        /** @description 解決成功 */
        201: {
          content: never;
        };
      };
    };
  };
  "/questions/{questionId}/comments": {
    /** Questionコメント作成 */
    post: {
      parameters: {
        path: {
          questionId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            userId: string;
            /** @enum {string} */
            type: "suggest" | "question" | "answer";
            content: string;
          };
        };
      };
      responses: {
        /** @description 作成成功 */
        201: {
          content: {
            "application/json": components["schemas"]["QuestionComment"];
          };
        };
      };
    };
  };
  "/topics/{topicId}/comments": {
    /** Topicコメント作成 */
    post: {
      parameters: {
        path: {
          topicId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            userId: string;
            /** @enum {string} */
            type: "suggest" | "question" | "answer";
            content: string;
          };
        };
      };
      responses: {
        /** @description 作成成功 */
        201: {
          content: {
            "application/json": components["schemas"]["TopicComment"];
          };
        };
      };
    };
  };
  "/tags": {
    /** タグ一覧取得 */
    get: {
      responses: {
        /** @description 成功 */
        200: {
          content: {
            "application/json": components["schemas"]["Tag"][];
          };
        };
      };
    };
    /** タグ作成 */
    post: {
      requestBody: {
        content: {
          "application/json": {
            name: string;
          };
        };
      };
      responses: {
        /** @description 作成成功 */
        201: {
          content: {
            "application/json": components["schemas"]["Tag"];
          };
        };
      };
    };
  };
  "/recommend": {
    /** 似たような質問にされていた追加質問コメントを推薦させる */
    post: {
      requestBody: {
        content: {
          "application/json": {
            docString: string;
          };
        };
      };
      responses: {
        /** @description 成功 */
        201: {
          content: {
            "application/json": string[];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    DocVector: number[];
    Question: {
      /** Format: uuid */
      id: string;
      summary: string;
      /** Format: uuid */
      userId: string;
      /** Format: date-time */
      finishedAt?: string;
      docVector: components["schemas"]["DocVector"];
      tags: components["schemas"]["Tag"][];
      topics: components["schemas"]["Topic"][];
      comments: components["schemas"]["QuestionComment"][];
      /** Format: date-time */
      createdAt: string;
    };
    Topic: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      questionId?: string;
      title: string;
      description: string;
      isDefaultTopic: boolean;
      comments: components["schemas"]["TopicComment"][];
      /** Format: date-time */
      createdAt: string;
    };
    QuestionComment: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      questionId: string;
      /** Format: uuid */
      userId: string;
      /** @enum {string} */
      type: "suggest" | "question" | "answer";
      content: string;
      /** Format: date-time */
      createdAt: string;
    };
    TopicComment: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      topicId: string;
      /** Format: uuid */
      userId: string;
      /** @enum {string} */
      type: "suggest" | "question" | "answer";
      content: string;
      /** Format: date-time */
      createdAt: string;
    };
    Tag: {
      /** Format: uuid */
      id: string;
      name: string;
    };
    OriginalUser: {
      /** Format: uuid */
      id: string;
      name: string;
      photoUrl: string;
    };
    QuestionResponse: {
      /** Format: uuid */
      questionId?: string;
      status?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
