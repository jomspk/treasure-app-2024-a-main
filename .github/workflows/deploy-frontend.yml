name: deploy frontend

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "frontend/**"
      - ".github/workflows/deploy-frontend.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read
  actions: read

env:
  OIDC_ROLE_ARN: "arn:aws:iam::${{ secrets.GROUP_AWS_ACCOUNT_ID }}:role/${{ vars.TEAM_NAME }}-oidc-github"

defaults:
  run:
    working-directory: frontend
jobs:
  frontend_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials from github actions secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.OIDC_ROLE_ARN }}
          aws-region: ap-northeast-1
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: "frontend/package.json"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json
      - name: Install
        run: npm install
      - name: Build
        run: npm run build
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_API_BASE_URL: ${{ vars.VITE_API_BASE_URL }}
      - name: Deploy
        run: aws s3 cp --recursive --region ap-northeast-1 dist s3://treasure-2024-${{ vars.TEAM_NAME }}-frontend
      - name: Get Specific CloudFront Distribution ID
        id: get-distribution
        run: |
          distribution_id=$(aws cloudfront list-distributions --query "DistributionList.Items[?Aliases.Items[0]=='group-${{ vars.TEAM_NAME }}.treasure.tech-dojo.net'].Id" --output text)
          echo "distribution_id=$distribution_id" >> $GITHUB_OUTPUT
      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ steps.get-distribution.outputs.distribution_id }} --paths "/*"
      - uses: ./.github/actions/notification
        with:
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
